{"version":3,"sources":["../app.min.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_canvas2","_interopRequireDefault","_snake2","_food2","obj","__esModule","default","element","document","getElementById","ctx","gameCanvas","getContext","snake","canvas","food","drawCanvas","drawSnake","randomCoordinate","setFoodLocation","drawFood","foodX","getFoodX","foodY","getFoodY","parts","getSnakeLocation","isFoodOnSnake","../scripts/modules/canvas.js","../scripts/modules/food.js","../scripts/modules/snake.js","2","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","Canvas","instance","TypeError","_classCallCheck","this","_ctx","_width","width","_height","height","_color","_border","fillStyle","strokeStyle","fillRect","strokeRect","forEach","part","x","y","3","Food","_foodX","_foodY","min","max","Math","round","random","4","Snake","_changingDirection","_horizontalVelocity","_verticalVelocity","_midX","_midY","_parts","snakePart"],"mappings":"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","file":"app.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar _canvas = require('../scripts/modules/canvas.js');\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _snake = require('../scripts/modules/snake.js');\n\nvar _snake2 = _interopRequireDefault(_snake);\n\nvar _food = require('../scripts/modules/food.js');\n\nvar _food2 = _interopRequireDefault(_food);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n* This is the app.js file, this file takes and runs all \r\n* code from the .js files under modules/\r\n*\r\n* @author Tristan Falcon\r\n**/\n\nvar element = document.getElementById(\"gameCanvas\");\nvar ctx = gameCanvas.getContext(\"2d\");\n\nvar snake = new _snake2.default(ctx, element);\nvar canvas = new _canvas2.default(ctx, element);\nvar food = new _food2.default(ctx, element);\n\ncanvas.drawCanvas();\nsnake.drawSnake();\nfood.randomCoordinate();\nfood.setFoodLocation();\nfood.drawFood();\nvar foodX = food.getFoodX();\nvar foodY = food.getFoodY();\nvar parts = snake.getSnakeLocation();\ncanvas.isFoodOnSnake(parts, foodX, foodY);\n\n},{\"../scripts/modules/canvas.js\":2,\"../scripts/modules/food.js\":3,\"../scripts/modules/snake.js\":4}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* This is the canvas.js file, \r\n* this file is responsible for the construction\r\n* and behavior of canvas objects\r\n*\r\n* @author Tristan Falcon\r\n**/\n\nvar Canvas = function () {\n\n    /**\r\n     * This is the constructor used to create Canvas objects \r\n     * \r\n     * @param ctx, the '2d' context of the canvas \r\n     * @param element, the html element id of the canvas\r\n     * \r\n     * @author Tristan Falcon\r\n     */\n    function Canvas(ctx, element) {\n        _classCallCheck(this, Canvas);\n\n        // represents the context for the canvas \n        this._ctx = ctx;\n        // the width and width in pixels of the canvas\n        this._width = element.width;\n        this._height = element.height;\n        // the color and border color of the canvas\n        this._color = 'black';\n        this._border = 'white';\n    }\n\n    /**\r\n     * this is the setCanvas method used to draw a blank canvas \r\n     * \r\n     * @author Tristan Falcon\r\n     */\n\n\n    _createClass(Canvas, [{\n        key: 'drawCanvas',\n        value: function drawCanvas() {\n            // set the color and and border color of the canvas ctx \n            this._ctx.fillStyle = this._color;\n            this._ctx.strokeStyle = this._border;\n            // draw the canvas and border using the ctx\n            this._ctx.fillRect(0, 0, this._width, this._height);\n            this._ctx.strokeRect(0, 0, this._width, this._height);\n        }\n    }, {\n        key: 'isFoodOnSnake',\n        value: function isFoodOnSnake(parts, foodX, foodY) {\n            parts.forEach(function compareLocations(part) {\n                var foodIsOnSnake = part.x == foodX && part.y == foodY;\n                if (foodIsOnSnake) return true;\n            });\n        }\n    }]);\n\n    return Canvas;\n}();\n\nexports.default = Canvas;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* This is the food.js file, this file\r\n* handles Food creation and behavior\r\n*\r\n* @author Tristan Falcon\r\n**/\n\nvar Food = function () {\n\n    /**\r\n     * this is the constructor used to create Food objects.\r\n     * \r\n     * @param ctx \r\n     * @param element \r\n     * \r\n     * @author Tristan Falcon\r\n     */\n    function Food(ctx, element) {\n        _classCallCheck(this, Food);\n\n        // sets the Snake's ctx to the '2d' canvas \n        this._ctx = ctx;\n        // the width and width in pixels of the canvas\n        this._width = element.width;\n        this._height = element.height;\n        // sets Snake color and border colors\n        this._color = 'red';\n        this._border = 'black';\n        // sets the coordinates of the food \n        this._foodX;\n        this._foodY;\n    }\n\n    /**\r\n     * Method used to return a random set of coordinates \r\n     * \r\n     * @param min, minimum coordinate value\r\n     * @param max, maximum coordinate value \r\n     * \r\n     * @author Tristan Falcon\r\n     */\n\n\n    _createClass(Food, [{\n        key: 'randomCoordinate',\n        value: function randomCoordinate(min, max) {\n            return Math.round((Math.random() * (max - min) + min) / 20) * 20;\n        }\n\n        /**\r\n         * Method used to set the snake coordinates, \r\n         * to a random location\r\n         * \r\n         * @author Tristan Falcon\r\n         */\n\n    }, {\n        key: 'setFoodLocation',\n        value: function setFoodLocation() {\n            this._foodX = this.randomCoordinate(0, this._width - 20);\n            this._foodY = this.randomCoordinate(0, this._height - 20);\n        }\n\n        /**\r\n         * Method used to draw food on canvas\r\n         * \r\n         * @author Tristan Falcon\r\n         */\n\n    }, {\n        key: 'drawFood',\n        value: function drawFood() {\n            // set the color and and border color of the canvas ctx \n            this._ctx.fillStyle = this._color;\n            this._ctx.strokeStyle = this._border;\n            // draw the canvas and border using the ctx\n            this._ctx.fillRect(this._foodX, this._foodY, 20, 20);\n            this._ctx.strokeRect(this._foodX, this._foodY, 20, 20);\n        }\n    }, {\n        key: 'getFoodX',\n        value: function getFoodX() {\n            return this._foodX;\n        }\n    }, {\n        key: 'getFoodY',\n        value: function getFoodY() {\n            return this._foodY;\n        }\n    }]);\n\n    return Food;\n}();\n\nexports.default = Food;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* This is the snake.js file, this file\r\n* handles Snake creation and behavior\r\n*\r\n* @author Tristan Falcon\r\n**/\n\nvar Snake = function () {\n\n    /**\r\n     * this is the constructor used to create Snake objects.\r\n     * \r\n     * @param ctx \r\n     * @param element \r\n     * \r\n     * @author Tristan Falcon\r\n     */\n    function Snake(ctx, element) {\n        _classCallCheck(this, Snake);\n\n        // sets the Snake's ctx to the '2d' canvas \n        this._ctx = ctx;\n        // sets Snake color and border colors\n        this._color = 'green';\n        this._border = 'black';\n        // variable used to track when Snake is changing direction \n        this._changingDirection = false;\n        // pixel representation of Snakes coordinates when moving\n        this._horizontalVelocity = 0;\n        this._verticalVelocity = 0;\n        // middle coordinates of canvas, where Snake is originally positioned\n        this._midX = element.width / 2;\n        this._midY = element.height / 2;\n        // array of coordinates used to represent Snake location \n        this._parts = [{ x: this._midX, y: this._midY }, { x: this._midX - 20, y: this._midY }, { x: this._midX - 40, y: this._midY }, { x: this._midX - 60, y: this._midY }, { x: this._midX - 80, y: this._midY }];\n    }\n\n    /**\r\n     * This method is used to draw the snake on the canvas\r\n     * \r\n     * @author Tristan Falcon\r\n     */\n\n\n    _createClass(Snake, [{\n        key: 'drawSnake',\n        value: function drawSnake() {\n            // set the variables to be used in drawSnakePart\n            var ctx = this._ctx;\n            ctx.fillStyle = this._color;\n            ctx.strokeStyle = this._border;\n\n            // loop through each snake _parts array and \n            // draw a 20px square on each coordinate\n            this._parts.forEach(function drawSnakePart(snakePart) {\n                ctx.fillRect(snakePart.x, snakePart.y, 20, 20);\n                ctx.strokeRect(snakePart.x, snakePart.y, 20, 20);\n            });\n        }\n    }, {\n        key: 'getSnakeLocation',\n        value: function getSnakeLocation() {\n            return this._parts;\n        }\n    }, {\n        key: 'moveSnake',\n        value: function moveSnake() {}\n    }]);\n\n    return Snake;\n}();\n\nexports.default = Snake;\n\n},{}]},{},[1]);\n"]}